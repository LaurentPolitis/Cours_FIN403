geom_smooth(se = FALSE)+ theme_solarized()+
labs(x="Date",y="Recherche en %", title="Big Data",subtitle="Fréquence des recherches du mot Big Data depuis 2004")
install.packages("DiagrammeR")
library(string)
install.packages("stringr")
install.packages("stringi")
install.packages("stringr")
install.packages("stringi")
install.packages("stringi")
?install.packages()
install.packages("https://cran.r-project.org/bin/windows/contrib/3.4/stringi_1.1.7.zip")
install.packages(repos="https://cran.r-project.org/bin/windows/contrib/3.4/stringi_1.1.7.zip")
devtools::install_url('https://cran.r-project.org/bin/windows/contrib/3.4/stringi_1.1.7.zip')
devtools::install_url("https://cran.r-project.org/bin/windows/contrib/3.4/stringi_1.1.7.zip")
devtools::install_cran(pkgs = "stringi")
library("stringi", lib.loc="~/R/win-library/3.2")
remove.packages("stringi", lib="~/R/win-library/3.2")
install.packages("stringr")
install.packages("C:/Users/Laurent/Downloads/stringi_1.1.7.tar.gz", repos = NULL, type = "source")
remove.packages("stringi", lib="~/R/win-library/3.2")
install.packages("C:/Users/Laurent/Downloads/stringi_1.1.7.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Laurent/Downloads/stringi_1.1.7.tar.gz", repos = NULL, type = "source")
knitr::opts_chunk$set(echo = FALSE)
library(diagrammeR)
install.packages("stringr")
install.packages("C:/Users/Laurent/Downloads/stringi_1.1.6.tar.gz", repos = NULL, type = "source")
installed.packages(stringr)
installed.packages("stringr")
install.packages("stringr")
devtools::install_github('talgalili/installr')
installr::updateR()
r
install.packages("readr")
install.packages(c("ggplot2", "ggthemes", "readr"))
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML")
)
knitr::opts_chunk$set(echo = FALSE)
source('http://www.sthda.com/upload/rquery_wordcloud.r')
filePath <- "https://en.wikipedia.org/wiki/Data_science"
res<-rquery.wordcloud(filePath, type ="url", lang = "english")
source('http://www.sthda.com/upload/rquery_wordcloud.r')
filePath <- "https://en.wikipedia.org/wiki/Big_dataS"
res<-rquery.wordcloud(filePath, type ="url", lang = "english")
source('http://www.sthda.com/upload/rquery_wordcloud.r')
filePath <- "https://en.wikipedia.org/wiki/Big_dat"
res<-rquery.wordcloud(filePath, type ="url", lang = "english")
source('http://www.sthda.com/upload/rquery_wordcloud.r')
filePath <- "https://en.wikipedia.org/wiki/Big_data"
res<-rquery.wordcloud(filePath, type ="url", lang = "english")
source('http://www.sthda.com/upload/rquery_wordcloud.r')
filePath <- "https://fr.wikipedia.org/wiki/Big_data"
res<-rquery.wordcloud(filePath, type ="url", lang = "fr")
source('http://www.sthda.com/upload/rquery_wordcloud.r')
filePath <- "https://fr.wikipedia.org/wiki/Big_data"
res<-rquery.wordcloud(filePath, type ="url", lang = "french")
source('http://www.sthda.com/upload/rquery_wordcloud.r')
filePath <- "https://en.wikipedia.org/wiki/Big_data"
res<-rquery.wordcloud(filePath, type ="url", lang = "english")
pi
#  le Diése sert à commenter le reste de la la ligne
# tout ce qui est écrit ici ne sera pas exécuté par R
# indiquer le but du programme ou toutes autres informations
# Nom  et Prénom dates
a <- "hello World ! "
b = pi
print(a)
print(b)
#  le Diése sert à commenter le reste de la la ligne
# tout ce qui est écrit ici ne sera pas exécuté par R
# indiquer le but du programme ou toutes autres informations
# Nom  et Prénom dates
a <- "hello World ! "
b = pi
print(a)
print(paste("pi is equal to",b)
?factor
factor(letters[1:20], labels = "letter")
factor(letters[1:5], labels = "letter")
factor(1:5)
class(factor(1:5))
ff<-factor(1:10)
t(1:10)
seq(10,1,-1)
## factor
?factor
ff<-factor(1:10)
f <- factor(1:10,levels = seq(from = 10,to = 1,by = -1))
f
knitr::opts_chunk$set(echo = FALSE)
## factor
ff<-factor(1:10)
f <- factor(1:10,levels = seq(from = 10,to = 1,by = -1))
ff
f
knitr::opts_chunk$set(echo = FALSE)
class(c)
class(d)
knitr::opts_chunk$set(echo = FALSE)
source('http://www.sthda.com/upload/rquery_wordcloud.r')
filePath <- "https://en.wikipedia.org/wiki/Big_data"
res<-rquery.wordcloud(filePath, type ="url", lang = "english")
library(readr)
library(ggplot2)
library(ggthemes)
multiTimeline <- read_csv("data/multiTimeline.csv",skip = 2)
multiTimeline$date <- paste0(multiTimeline$Mois,"-15")
ggplot2::ggplot(multiTimeline,aes(as.Date(date),multiTimeline$`Big data: (Dans tous les pays)`)) + geom_line(size=1) +
geom_smooth(se = FALSE)+ theme_igray()+
labs(x="Date",y="Recherche en %", title="Big Data",subtitle="Fréquence des recherches du mot Big Data depuis 2004",caption="https://trends.google.com/trends/explore?date=all&q=Big%20data")
library(ggplot2)
df = data.frame(x=rnorm(1:84),y=rnorm(1:84),
lettres=LETTERS[rep(seq( from = 1, to = 28 ),3)])
df[!complete.cases(df),"lettres"]="A"
df$test= ifelse(df$lettres=="A","A","pas A")
ggplot(df,aes(x=x,y=y))+geom_text(aes(label=lettres))
#ggplot(df,aes(x=x,y=y,colour=test))+geom_text(aes(label=lettres))
ggplot(df,aes(x=x,y=y,colour=test,size=test))+geom_text(aes(label=lettres))+labs(colour="",size="")+scale_color_manual(values = c("red","black"))+scale_size_manual(values = c(6.5,4))
source("cours_data_visualisation/hello.R")
class(a)
b <- 1
class(b)
#vecteurs
c <- c(1,2,3,4)
d <- c("a","b","c","d")
e <- c("a"=1,"b"=2,"c"=3,"d"=4)
f <- c(1,"a","d",4)
## factor
ff<-factor(1:10)
f <- factor(1:10,levels = seq(from = 10,to = 1,by = -1))
ff
f
mat <- matrix(data = c.m, ncol=4,nrow = 3)
m.m <- cbind(f.m,c.m)
f.m <- cbind(f)
f.m
c.m <- cbind(c)
c.m
m.m <- cbind(f.m,c.m)
m.m <- cbind(f.m,c.m)
class(a)
b <- 1
class(b)
#vecteurs
c <- c(1,2,3,4)
d <- c("a","b","c","d")
e <- c("a"=1,"b"=2,"c"=3,"d"=4)
f <- c(1,"a","d",4)
class(c)
class(d)
class(e)
class(f)
knitr::opts_chunk$set(echo = FALSE)
source('http://www.sthda.com/upload/rquery_wordcloud.r')
filePath <- "https://en.wikipedia.org/wiki/Big_data"
res<-rquery.wordcloud(filePath, type ="url", lang = "english")
library(readr)
library(ggplot2)
library(ggthemes)
multiTimeline <- read_csv("data/multiTimeline.csv",skip = 2)
multiTimeline$date <- paste0(multiTimeline$Mois,"-15")
ggplot2::ggplot(multiTimeline,aes(as.Date(date),multiTimeline$`Big data: (Dans tous les pays)`)) + geom_line(size=1) +
geom_smooth(se = FALSE)+ theme_igray()+
labs(x="Date",y="Recherche en %", title="Big Data",subtitle="Fréquence des recherches du mot Big Data depuis 2004",caption="https://trends.google.com/trends/explore?date=all&q=Big%20data")
library(ggplot2)
df = data.frame(x=rnorm(1:84),y=rnorm(1:84),
lettres=LETTERS[rep(seq( from = 1, to = 28 ),3)])
df[!complete.cases(df),"lettres"]="A"
df$test= ifelse(df$lettres=="A","A","pas A")
ggplot(df,aes(x=x,y=y))+geom_text(aes(label=lettres))
#ggplot(df,aes(x=x,y=y,colour=test))+geom_text(aes(label=lettres))
ggplot(df,aes(x=x,y=y,colour=test,size=test))+geom_text(aes(label=lettres))+labs(colour="",size="")+scale_color_manual(values = c("red","black"))+scale_size_manual(values = c(6.5,4))
source("cours_data_visualisation/hello.R")
class(a)
b <- 1
class(b)
#vecteurs
c <- c(1,2,3,4)
d <- c("a","b","c","d")
e <- c("a"=1,"b"=2,"c"=3,"d"=4)
f <- c(1,"a","d",4)
## factor
ff<-factor(1:10)
f <- factor(1:10,levels = seq(from = 10,to = 1,by = -1))
ff
f
class(c)
class(d)
class(e)
class(f)
m.m <- cbind(f.m,c.m)
#  le Diése sert à commenter le reste de la la ligne
# tout ce qui est écrit ici ne sera pas exécuté par R
# indiquer le but du programme ou toutes autres informations
# Nom  et Prénom dates
a <- "hello World ! "
b = pi
print(a)
print(paste("pi is equal to",b))
source("cours_data_visualisation/hello.R")
mat <- matrix(data = c.m, ncol=4,nrow = 3)
mat
df = data.frame("numeriques"= c, lettres=f,stringsAsFactors = F)
mat <- matrix(data = c.m, ncol=4,nrow = 3)
mat
df = data.frame("numeriques"= c, lettres=f,stringsAsFactors = F)
m.m <- cbind(f.m,c.m)
f.m <- cbind(f)
f.m
c.m <- cbind(c)
c.m
opts_chunk$set(error = FALSE)
knitr::opts_chunk$set(echo = T)
c.m
mat <- matrix(data = rep(c.m,3), ncol=3,nrow = 4)
mat
df = data.frame("numeriques"= c, lettres=f,stringsAsFactors = F)
c
df = data.frame("numeriques"= c, lettres=f,stringsAsFactors = F)
mat <- matrix(data = rep(c.m,3), ncol=3,nrow = 4)
mat
df = data.frame("numeriques"= 1:4, lettres=c("A","B","C","D"),stringsAsFactors = F)
df
object.size(mat)
object.size(df)
mat
df
object.size(as.data.frame(mat))
object.size(mat)
object.size(as.data.frame(mat))
c(1,"a","d",4)
ff<-factor(1:10)
f <- factor(1:10,levels = seq(from = 10,to = 1,by = -1))
ff
f
as.numeric(as.character(ff))
as.numeric(ff)
length(x = c)
names(x=e)
# accéder à un élement
c[1]
e["a"]
e[c("a","c")]
cor
cor(rnorm(x = 100,mean = 1,sd = 0.25),rnorm(x = 100,mean = 1,sd = 25))
rnorm(x = 100,mean = 1,sd = 0.25),rnorm(x = 100,mean = 1,sd = 25)
rnorm(x = 100,mean = 1,sd = 0.25)
cor
cor(rnorm(n = 100,mean = 1,sd = 0.25),rnorm(n = 100,mean = 1,sd = 25))
?mean
cor(rnorm(n = 100,mean = 1,sd = 0.25),rnorm(n = 100,mean = 1,sd = 25))
mean
cor(rnorm(n = 100,mean = 1,sd = 0.25),rnorm(n = 100,mean = 1,sd = 25))
max
cor(rnorm(n = 100,mean = 1,sd = 0.25),rnorm(n = 100,mean = 1,sd = 25))
nrow
?cor
cor(rnorm(n = 100,mean = 1,sd = 0.25),rnorm(n = 100,mean = 1,sd = 25))
factorielle <-1
for (i in seq(1, 10))
factorielle <- factorielle*i
factorielle <-1
for (i in seq(1, 10)){
factorielle <- factorielle*i
}
print
factorielle <-1
for (i in seq(1, 10)){
factorielle <- factorielle*i
}
print(factorielle)
10!
gamma(11)
?gamma
factorial(11)
factorial(10)
factorielle <-1
for (i in seq(1, 10)){
factorielle <- factorielle*i
}
print(factorielle)
# on vérifie avec la fonction déjà codée
factorial(10)
factorial
qplot(gamma(1:100))
qplot(1:100,gamma(1:100))
gamma(1:100)
qplot(1:100,gamma(1:100)/100)
qplot(1:100,gamma(1:100/100)/)
qplot(1:100,gamma(1:100/100))
qplot(1:100,gamma((1:100)/100))
qplot(1:100/100,gamma((1:100)/100))
qplot(1:100/100,gamma((1:500)/100))
qplot(1:500/100,gamma((1:500)/100))
qplot(1:1000/100,gamma((1:1000)/100))
qplot(1:1000/100,gamma((1:1000)/100)) + scale_y_log10()
qplot(1:1000/100,gamma((1:1000)/100),geom="line") + scale_y_log10()
qplot(1:1000/100,gamma((1:1000)/100),geom="line",size=1) + scale_y_log10()
qplot(1:1000/100,gamma((1:1000)/100),geom="line",size=0.5) + scale_y_log10()
qplot(1:1000/100,gamma((1:1000)/100),geom="line") + scale_y_log10()
qplot(1:1000/100,gamma((1:1000)/100)) + scale_y_log10()
qplot(1:1000/100,gamma((1:1000)/100)) + scale_y_log10()+ ggthemes::theme_solarized_2()
qplot(1:1000/100,gamma((1:1000)/100)) + scale_y_log10()+ ggthemes::theme_map()
qplot(1:1000/100,gamma((1:1000)/100)) + scale_y_log10()+ ggthemes::theme_foundation()
qplot(1:1000/100,gamma((1:1000)/100)) + scale_y_log10()+ ggthemes::theme_wsj()
qplot(1:1000/100,gamma((1:1000)/100)) + scale_y_log10()+ ggthemes::theme_solid()
qplot(1:1000/100,gamma((1:1000)/100)) + scale_y_log10()+ ggthemes::theme_fivethirtyeight()
qplot(1:2000/100,gamma((1:2000)/100)) + scale_y_log10()+ ggthemes::theme_fivethirtyeight()
qplot(1:2000/100,gamma((1:2000)/100)) + scale_y_log10()+ ggthemes::theme_fivethirtyeight() + labs(title="Fonction gamma")
factorielle <-1
for (i in seq(1, 10)){
factorielle <- factorielle*i
}
print(factorielle)
# on vérifie avec la fonction déjà codée
factorial(10)
factorial
qplot(1:2000/100,gamma((1:2000)/100)) + scale_y_log10()+ ggthemes::theme_fivethirtyeight() + labs(title="Fonction gamma")
factorielle <-1
for (i in seq(1, 10)){
factorielle <- factorielle*i
}
print(factorielle)
# on vérifie avec la fonction déjà codée
factorial(10)
factorial
qplot(1:2000/100,gamma((1:2000)/100)) + scale_y_log10()+ ggthemes::theme_fivethirtyeight() + labs(title="Fonction gamma")
factorial(10)
factorial
qplot(1:2000/100,gamma((1:2000)/100)) + scale_y_log10()+ ggthemes::theme_fivethirtyeight() + labs(title="Fonction gamma")
install.packages("higcharter")
install.packages("dygraphs")
devtools::install_github(c("ramnathv/htmlwidgets", "rstudio/dygraphs"))
install.packages("devtools")
devtools::install_github(c("ramnathv/htmlwidgets", "rstudio/dygraphs"))
shiny::runApp('~/R/examples/crandash')
install.packages("shinysignals")
runApp('~/R/examples/sales')
runApp('~/R/examples/themes/app-darktheme.R')
install.packages("plotly")
runApp('~/R/examples/themes/app-darktheme.R')
install.packages("DT")
runApp('~/R/examples/themes/app-darktheme.R')
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML"))
source('http://www.sthda.com/upload/rquery_wordcloud.r')
filePath <- "https://www.r-bloggers.com/"
res<-rquery.wordcloud(filePath, type ="url", lang = "english")
Q
?mean
??mean
??m
??ggplot
??ggplot()
angers_pop <- read.delim2("~/R/Cours_FIN403_2018/Cours_1/data/angers_pop.csv")
View(angers_pop)
angers_pop <- read.delim2("~/R/Cours_FIN403_2018/Cours_1/data/angers_pop.csv")
View(angers_pop)
a <- "hello World ! "
b = pi
print(a)
print(paste("pi is equal to",b))
a
b
b+1
c <- c(1,2,3,4)
d <- c("a","b","c","d")
e <- c("a"=1,"b"=2,"c"=3,"d"=4)
f <- c(1,"a","d",4)
class(f)
as.numeric(f)
angers_pop$Year
angers_pop$Population
class(angers_pop$Population)
angers_pop[,"Population"]
?cbind()
cbind(f,f)
as.data.frame(cbind(f,f))
c <- c(1,2,3,4)
d <- c("a","b","c","d")
e <- c("a"=1,"b"=2,"c"=3,"d"=4)
f <- c(1,"a","d",4)
df <- as.data.frame(cbind(f,f))
df = as.data.frame(cbind(f,f))
View(df)
hello <-function(texte=NULL){   # argument ou données d'entrées
#code manipulant les données d'entrée
return(texte)  #  return  renvoie le résultat de la fonction
}
source("cours_data_visualisation/hello_fun.R")
hello("hello world !")
source('~/R/Cours_FIN403_2018/Cours_1/hello.R', echo=TRUE)
hello(texte="salut")
source('~/R/Cours_FIN403_2018/Cours_1/hello.R', echo=TRUE)
hello(texte="salut")
source('~/R/Cours_FIN403_2018/Cours_1/hello.R', echo=TRUE)
source('~/R/Cours_FIN403_2018/Cours_1/hello.R', echo=TRUE)
hello(texte="salut")
source('~/R/Cours_FIN403_2018/Cours_1/hello.R', echo=TRUE)
hello(texte="salut")
nom <- Sys.getenv("USERNAME")
nom
source('~/R/Cours_FIN403_2018/Cours_1/hello.R', echo=TRUE)
hello(texte="salut")
ls
format(as.Date("2020-04-06"),format="%A %d %B %Y")
factorielle <-1
for (i in seq(1, 10)){
factorielle <- factorielle*i
}
factorielle
gamma(10)
Gamma(10)
gamma(10)
factorielle <-1
for (i in seq(1, 9)){
factorielle <- factorielle*i
}
factorielle
knitr::opts_chunk$set(echo = TRUE)
qplot(1:2000/100,gamma((1:2000)/100)) + scale_y_log10()+ ggthemes::theme_fivethirtyeight() + labs(title="Fonction gamma")
library(ggplot2)
qplot(1:2000/100,gamma((1:2000)/100)) + scale_y_log10()+ ggthemes::theme_fivethirtyeight() + labs(title="Fonction gamma")
library(ggplot2)
qplot(1:3000/100,gamma((1:3000)/100)) + scale_y_log10()+ ggthemes::theme_fivethirtyeight() + labs(title="Fonction gamma")
df = readr::read_csv(file = "https://github.com/LaurentPolitis/Cours_FIN403_2018/blob/master/Cours_1/data/angers_pop.csv")
df = readr::read_csv(file = "https://github.com/LaurentPolitis/Cours_FIN403_2018/blob/master/Cours_1/data/angers_pop.csv")
df = readr::read_csv(file = url("https://github.com/LaurentPolitis/Cours_FIN403_2018/blob/master/Cours_1/data/angers_pop.csv"))
df = readr::read_csv(file = url("https://raw.githubusercontent.com/LaurentPolitis/Cours_FIN403_2018/master/Cours_1/data/angers_pop.csv"))
df
df = readr::read_delim(file = url("https://raw.githubusercontent.com/LaurentPolitis/Cours_FIN403_2018/master/Cours_1/data/angers_pop.csv"))
df = readr::read_delim(file = url("https://raw.githubusercontent.com/LaurentPolitis/Cours_FIN403_2018/master/Cours_1/data/angers_pop.csv",delim=" "))
df = readr::read_delim(file = url("https://raw.githubusercontent.com/LaurentPolitis/Cours_FIN403_2018/master/Cours_1/data/angers_pop.csv"),delim=" ")
df
df = readr::read_delim(file = url("https://raw.githubusercontent.com/LaurentPolitis/Cours_FIN403_2018/master/Cours_1/data/angers_pop.csv"),delim="`t")
qplot(data = angers_pop, aes(Year,Population))+ ggthemes::theme_fivethirtyeight() + labs(title="Fonction gamma")
angers_pop <- read_delim("https://raw.githubusercontent.com/LaurentPolitis/Cours_FIN403_2018/master/Cours_1/data/angers_pop.csv",
"\t", escape_double = FALSE, trim_ws = TRUE)
library(readr)
library(readr)
angers_pop <- read_delim("https://raw.githubusercontent.com/LaurentPolitis/Cours_FIN403_2018/master/Cours_1/data/angers_pop.csv",
"\t", escape_double = FALSE, trim_ws = TRUE)
qplot(data = angers_pop, aes(Year,Population))+ ggthemes::theme_fivethirtyeight() + labs(title="Fonction gamma")
qplot(data = angers_pop, x=Year,y=Population)+ ggthemes::theme_fivethirtyeight() + labs(title="Fonction gamma")
qplot(data = angers_pop, x=Year,y=Population)+ ggthemes::theme_fivethirtyeight() + labs(title="Demographie Angers 2020")
qplot(data = angers_pop, x=Year,y=Population,)+ ggthemes::theme_fivethirtyeight() + labs(title="Démographie Angers")
qplot(data = angers_pop, x=Year,y=Population, geom = c("point","line","smooth"))+ ggthemes::theme_fivethirtyeight() + labs(title="Démographie Angers")
qplot(data = angers_pop, x=Year,y=Population, geom = c("point","smooth"))+ ggthemes::theme_fivethirtyeight() + labs(title="Démographie Angers")
library(readr)
pollution_shanghai <- read_csv("~/R/Cours_FIN403_2018/CoursAvril/data/pollution_shanghai.csv")
ggplot(data = pollution_shanghai %>% mutate(year=lubridate::year(validdate) , month = lubridate::month(validdate))
%>% filter(month %in% c(1,2))) + geom_boxplot(aes(x=as.character(year),y = `no2:ugm3`)) +
facet_wrap(~month)+ labs(x="Year",title = "Shanghai NO2 pollution", subtitle ="by month from CAMS")
library(dplyr)
ggplot(data = pollution_shanghai %>% mutate(year=lubridate::year(validdate) , month = lubridate::month(validdate))
%>% filter(month %in% c(1,2))) + geom_boxplot(aes(x=as.character(year),y = `no2:ugm3`)) +
facet_wrap(~month)+ labs(x="Year",title = "Shanghai NO2 pollution", subtitle ="by month from CAMS")
ggplot(data = pollution_shanghai %>% mutate(year=lubridate::year(validdate) , month = lubridate::month(validdate))
%>% filter(month %in% c(1,2))) + geom_boxplot(aes(x=as.character(year),y = `Co:ugm3`)) +
facet_wrap(~month)+ labs(x="Year",title = "Shanghai NO2 pollution", subtitle ="by month from CAMS")
ggplot(data = pollution_shanghai %>% mutate(year=lubridate::year(validdate) , month = lubridate::month(validdate))
%>% filter(month %in% c(1,2))) + geom_boxplot(aes(x=as.character(year),y = `co:ugm3`)) +
facet_wrap(~month)+ labs(x="Year",title = "Shanghai NO2 pollution", subtitle ="by month from CAMS")
pollution_shanghai <- read_csv("~/R/Cours_FIN403_2018/CoursAvril/data/pollution_shanghai.csv")
pollution_shanghai <- read_delim("~/R/Cours_FIN403_2018/CoursAvril/data/pollution_shanghai.csv",
";", escape_double = FALSE, trim_ws = TRUE)
ggplot(data = pollution_shanghai %>% mutate(year=lubridate::year(validdate) , month = lubridate::month(validdate))
%>% filter(month %in% c(1,2))) + geom_boxplot(aes(x=as.character(year),y = `co:ugm3`)) +
facet_wrap(~month)+ labs(x="Year",title = "Shanghai NO2 pollution", subtitle ="by month from CAMS")
ggplot(data = pollution_shanghai %>% mutate(year=lubridate::year(validdate) , month = lubridate::month(validdate))
%>% filter(month %in% c(1,2,3))) + geom_boxplot(aes(x=as.character(year),y = `No:ugm3`)) +
facet_wrap(~month)+ labs(x="Year",title = "Shanghai NO2 pollution", subtitle ="by month from CAMS")
ggplot(data = pollution_shanghai %>% mutate(year=lubridate::year(validdate) , month = lubridate::month(validdate))
%>% filter(month %in% c(1,2,3))) + geom_boxplot(aes(x=as.character(year),y = `no:ugm3`)) +
facet_wrap(~month)+ labs(x="Year",title = "Shanghai NO2 pollution", subtitle ="by month from CAMS")
ggplot(data = pollution_shanghai %>% mutate(year=lubridate::year(validdate) , month = lubridate::month(validdate))
%>% filter(month %in% c(1,2,3))) + geom_boxplot(aes(x=as.character(year),y = `no2:ugm3`)) +
facet_wrap(~month)+ labs(x="Year",title = "Shanghai NO2 pollution", subtitle ="by month from CAMS")
ggplot(data = pollution_shanghai %>% mutate(year=lubridate::year(validdate) , month = lubridate::month(validdate))
%>% filter(month %in% c(1,2,3,4))) + geom_boxplot(aes(x=as.character(year),y = `no2:ugm3`)) +
facet_wrap(~month)+ labs(x="Year",title = "Shanghai NO2 pollution", subtitle ="by mont
ggplot(data = pollution_shanghai %>% mutate(year=lubridate::year(validdate) , month = lubridate::month(validdate))
%>% filter(month %in% c(1,2,3,4))) + geom_boxplot(aes(x=as.character(year),y = `no2:ugm3`)) +
facet_wrap(~month)+ labs(x="Year",title = "Shanghai NO2 pollution", subtitle ="by month from CAMS")
pollution_shanghai <- read_delim("~/R/Cours_FIN403_2018/CoursAvril/data/pollution_shanghai.csv",
";", escape_double = FALSE, trim_ws = TRUE)
ggplot(data = pollution_shanghai %>% mutate(year=lubridate::year(validdate) , month = lubridate::month(validdate))
%>% filter(month %in% c(1,2,3,4))) + geom_boxplot(aes(x=as.character(year),y = `no2:ugm3`)) +
facet_wrap(~month)+ labs(x="Year",title = "Shanghai NO2 pollution", subtitle ="by month from CAMS")
library(readr)
library(dplyr)
pollution_shanghai <- read_delim("~/R/Cours_FIN403_2018/CoursAvril/data/pollution_shanghai.csv",
";", escape_double = FALSE, trim_ws = TRUE)
ggplot(data = pollution_shanghai %>% mutate(year=lubridate::year(validdate) , month = lubridate::month(validdate))
%>% filter(month %in% c(1,2,3,4))) + geom_boxplot(aes(x=as.character(year),y = `pm1:ugm3`)) +
facet_wrap(~month)+ labs(x="Year",title = "Shanghai NO2 pollution", subtitle ="by month from CAMS")
library(readr)
library(dplyr)
pollution_shanghai <- read_delim("~/R/Cours_FIN403_2018/CoursAvril/data/pollution_shanghai.csv",
";", escape_double = FALSE, trim_ws = TRUE)
ggplot(data = pollution_shanghai %>% mutate(year=lubridate::year(validdate) , month = lubridate::month(validdate))
%>% filter(month %in% c(1,2,3,4))) + geom_boxplot(aes(x=as.character(year),y = `pm2p5:ugm3`)) +
facet_wrap(~month)+ labs(x="Year",title = "Shanghai NO2 pollution", subtitle ="by month from CAMS")
library(readr)
library(dplyr)
pollution_shanghai <- read_delim("~/R/Cours_FIN403_2018/CoursAvril/data/pollution_shanghai.csv",
";", escape_double = FALSE, trim_ws = TRUE)
ggplot(data = pollution_shanghai %>% mutate(year=lubridate::year(validdate) , month = lubridate::month(validdate))
%>% filter(month %in% c(1,2,3,4))) + geom_boxplot(aes(x=as.character(year),y = `pm2p5:ugm3`)) +
facet_wrap(~month)+ labs(x="Year",title = "Shanghai PM 2.5 pollution", subtitle ="by month from CAMS")
library(ggplot2)
library(readr)
angers_pop <- read_delim("https://raw.githubusercontent.com/LaurentPolitis/Cours_FIN403_2018/master/Cours_1/data/pollution_Wuhan.csv",
"\t", escape_double = FALSE, trim_ws = TRUE)
